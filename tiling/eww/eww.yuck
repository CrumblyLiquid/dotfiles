;; Fade in/out the OSD
(defvar caps_osd_open false)
;; Time of the last Caps Lock keypress
(defvar caps_time 0)
;; I couldn't find a way to monitor /sys filesystem so I just poll it regularly
(defpoll caps_on
    :initial false
    :run-while caps_osd_open
    :interval "100ms"
    `scripts/key-status capslock`
)

(defwidget caps_osd []
    ;; Revealer is used to nicely fade the OSD in and out
    (revealer
        :transition "crossfade"
        :reveal caps_osd_open
        :duration "1000ms"
        (box
            :class "caps_osd"
            :orientation "h"
            :space-evenly false
            :spacing 20
            :halign "center"
            (label
                ;; This is supposed to be nf-md-keyboard (f030c)
                ;; that is part of the Nerd Fonts pathes
                :text "󰌌"
                :class "caps_icon"
                :limit-width 2
                :show-truncated false
                :wrap false
            )
            (label
                :text {caps_on == "1" ? "caps lock on" : "caps lock off"}
            )
        )
    )
)

;; This window definition is specific to Wayland (Hyprland)
;; and may need adjusting to X11
(defwindow caps
    :monitor 0
    :geometry (geometry
        :x "50%"
        :y "50%"
        :width "10%"
        :height "4%"
        :anchor "center"
    )
    :stacking "fg"
    :focusable false
    (caps_osd)
)

;; bar
;; bar_inner
;; left center right
;; workspaces window-title volume wifi brightness | system(cpu mem disk net) | calendar(clock)

(defwidget separator []
    (box
        :class "module"
        :vexpand "false"
        :hexpand "false"
        (label
            :class "separator"
            :text "|"
        )
    )
)

;; Taken from https://wiki.hyprland.org/Useful-Utilities/Status-Bars/#configuration
;; and slightly modified
(deflisten workspaces :initial "[]" "scripts/get-workspaces")
(deflisten current_workspace :initial "1" "scripts/get-active-workspace")
(deflisten urgent_window_workspace :initial "" "scripts/get-urgent-window-workspace")

(defwidget workspaces []
    (eventbox
        :onscroll "scripts/change-active-workspace {} ${current_workspace}" :class "workspaces-widget"
        (box
            :class "workspaces"
            :space-evenly false
            ;;(label
            ;;    :text "${workspaces}${current_workspace}"
            ;;    :visible false
            ;;)
            (for workspace in workspaces
                (revealer
                    :reveal "${workspace.windows > 0 || workspace.id == current_workspace}"
                    :transition "slideleft"
                    (eventbox
                        :onclick "hyprctl dispatch workspace ${workspace.id}"
                        (box
                            :class "workspace ${workspace.id == current_workspace ? "current" : ""} ${workspace.windows > 0 ? "occupied" : "empty"} ${workspace.id == urgent_window_workspace ? "urgent" : ""}"
                            (label :text "${workspace.id}")
                            ;; (label :text "")
                        )
                    )
                )
            )
        )
    )
)

(defwidget left []
    (box
        :halign "start"
        :class "left"
        :space-evenly false
        (workspaces)
    )
)

(deflisten window :initial "..." "scripts/get-window-title")

(defwidget title []
    (box
        :class "title"
        (label
            :text window
            :limit-width 50
            :show-truncated true
            :wrap false
        )
    )
)

(defwidget center []
    (box
        :halign "center"
        :class "center"
        :space-evenly true
        (title)
    )
)
;; volume brightness | system(battery cpu mem disk net) | calendar(clock)

;; Widget that displays information such as volume or brightness
;; Shows icon and number
;; Number gets replaced on hover with scale bar
;; which can be used to change the value
;; name: string - name of the specific widget
;;                it's used in css classes (<name>_icon and <name>_scale)
;;                and in the rev variable name
;; icon: string - the icon to display (could be a variable)
;; value: variable (number) - the value that's displayed
;; reveal: variable (bool) - variable in the format of <name>_reveal that is used
;;                 twea        to reveal the scal bar on hover
;; change: string - command to run to change value (replaces {} with the value)
(defwidget scale_info [name icon value reveal change]
    (eventbox
        :onhover "${EWW_CMD} update ${name}_reveal=true"
        :onhoverlost "${EWW_CMD} update ${name}_reveal=false"
        (box
            ;; You must specify :space-evenly false in order
            ;; for the revealer to work correctly when in the "slide..." mode
            :space-evenly false
            (button
                ;; TODO: Create popups
                ;; :onclick "${popup}"
                :class "icon ${name}_icon" "${icon}"
            )
            (revealer
                :transition "slideright"
                :reveal "${!reveal}"
                :duration "350ms"
                (label :text "${value}%") 
            )
            (revealer
                :transition "slideleft"
                :reveal reveal
                :duration "350ms"
                (scale
                    :class "${name}_scale"
                    :value value
                    :tooltip "${value}%"
                    :max 101
                    :min 0
                    :onchange "${change}"
                )
            )
        )
    )
)

(defvar volume_reveal false)
(defpoll volume_out :interval "1s" "scripts/audio get")

(defvar brightness_reveal false)
(defpoll brightness :interval "1s" "scripts/brightness get")
 
;; Circular info widget used mainly for system info
;; name: string - name of the widget to use in css (<name> and <name>_icon classes)
;; icon: string - icon to show in the center of the circle
;; tooltip: string - string to display in tooltip (`{}` is replaced by the value)
;; value: variable (number) - value to display
(defwidget circular_info [name icon ?tooltip value]
    (eventbox
        :onclick ""
        (circular-progress
            :class "circular_info ${name}"
            :tooltip {tooltip == "" ? "${round(value, 1)}%" : "${replace(tooltip, '\\{\\}',round(value, 1))}"}
            :value value
            :thickness 3
            (label
                :class "circular_icon ${name}_icon"
                :text icon
                :wrap false
                :limit-width 2
                :show-truncated false
            )
        )
    )
)
 
(defvar date_reveal false)
(defwidget clock []
    (eventbox
        :onhover "${EWW_CMD} update date_reveal=true"
        :onhoverlost "${EWW_CMD} update date_reveal=false"
        (box
            ;; You must specify :space-evenly false in order
            ;; for the revealer to work correctly
            :space-evenly false
            (button
                ;; TODO: Create popups
                ;; :onclick "scripts/popup calendar"
                :class "clock"
                (label
                    :text "${formattime(EWW_TIME, '%k:%M:%S', 'Europe/Prague')}"
                )
            )
            (revealer
                :transition "slideleft"
                :reveal date_reveal
                :duration "350ms"
                (button
                    :onclick "scripts/popup calendar"
                    :class "date"
                    (label
                        :text "${formattime(EWW_TIME, '%-d.%-m.%Y', 'Europe/Prague')}"
                    )
                )
            )
        )
    )
)

(defwidget right []
    (box
        :space-evenly false
        :halign "end"
        :class "right"
        (scale_info
            :name "volume"
            :icon "󰕾"
            :value volume_out
            :reveal volume_reveal
            :change "scripts/audio set {}"
        )
        (scale_info
            :name "brightness"
            :icon "󰃠"
            :value brightness
            :reveal brightness_reveal
            :change "scripts/brightness set {}"
        )
        (separator)
        (circular_info
            :name "battery"
            :icon "󱊣"
            :value {EWW_BATTERY.total_avg}
            :tooltip "battery on {}%"
        )
        (circular_info
            :name "cpu"
            :icon "󰻠"
            :value {EWW_CPU.avg}
            :tooltip "{}% of cpu used"
        )
        (circular_info
            :name "ram"
            :icon "󰍛"
            :value {EWW_RAM.used_mem_perc}
            :tooltip "{}% of ram used"
        )
        (circular_info
            :name "disk"
            :icon "󰆼"
            :value {EWW_DISK["/"].used_perc}
            :tooltip "{}% of disk used"
        )
        (separator)
        (clock)
    )
)

(defwidget bar_inner []
    (box
        :class "bar_inner"
        (left)
        (center)
        (right)
    )
)

(defwindow bar
    :geometry (geometry
        :x "0%"
        :y "9px"
        :width "99%"
        :height "3.5%"
        :anchor "top center"
    )
    :monitor 0
    :exclusive true
    (bar_inner)
)
